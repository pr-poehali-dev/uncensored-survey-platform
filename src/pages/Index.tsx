import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

interface Question {
  id: number;
  text: string;
  options: string[];
}

const questions: Question[] = [
  {
    id: 1,
    text: '–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞ –¥–ª—è –≤–∞—Å –ø–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö?',
    options: [
      '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ - –±–µ–∑ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –Ω–µ –±—É–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è',
      '–í–∞–∂–Ω–∞, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞',
      '–°–∫–æ—Ä–µ–µ –Ω–µ –≤–∞–∂–Ω–∞',
      '–°–æ–≤—Å–µ–º –Ω–µ –≤–∞–∂–Ω–∞'
    ]
  },
  {
    id: 2,
    text: '–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ö—Ä–∞–Ω–µ–Ω–∏—é –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?',
    options: [
      '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ',
      '–î–æ–ø—É—Å–∫–∞—é —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö',
      '–î–æ–≤–µ—Ä—è—é –∫–æ–º–ø–∞–Ω–∏—è–º —Ö—Ä–∞–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ',
      '–ù–µ –¥—É–º–∞–ª –æ–± —ç—Ç–æ–º'
    ]
  },
  {
    id: 3,
    text: '–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å —É–¥–æ–±—Å—Ç–≤–æ–º —Ä–∞–¥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ü–µ–Ω–∑—É—Ä—ã?',
    options: [
      '–î–∞, —Å–≤–æ–±–æ–¥–∞ —Å–ª–æ–≤–∞ –≤–∞–∂–Ω–µ–µ —É–¥–æ–±—Å—Ç–≤–∞',
      '–ì–æ—Ç–æ–≤ –∫ –Ω–µ–±–æ–ª—å—à–∏–º –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞–º',
      '–•–æ—á—É –∏ —Å–≤–æ–±–æ–¥—É, –∏ —É–¥–æ–±—Å—Ç–≤–æ',
      '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —É–¥–æ–±—Å—Ç–≤–æ'
    ]
  },
  {
    id: 4,
    text: '–ö–∞–∫ –¥–æ–ª–∂–Ω–∞ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã?',
    options: [
      '–í–æ–æ–±—â–µ –Ω–∏–∫–∞–∫ - –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞',
      '–¢–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
      '–°–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–∞–º–æ —Ä–µ—à–∞–µ—Ç —á—Ç–æ –¥–æ–ø—É—Å—Ç–∏–º–æ',
      '–ù—É–∂–Ω—ã —á–µ—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã'
    ]
  },
  {
    id: 5,
    text: '–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Å–æ—Ü—Å–µ—Ç–∏?',
    options: [
      '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å –º–æ—é –ª–∏—á–Ω–æ—Å—Ç—å',
      '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Ä–µ–∫–ª–∞–º—ã',
      '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–æ–≤–æ—Ä–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ',
      '–ó–∞—â–∏—Ç–∞ –æ—Ç —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö'
    ]
  }
];

export default function Index() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [showResults, setShowResults] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<string>('');
  const { toast } = useToast();

  const progress = ((currentQuestion + 1) / questions.length) * 100;

  const handleNext = () => {
    if (!selectedAnswer) {
      toast({
        title: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç',
        description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞',
        variant: 'destructive'
      });
      return;
    }

    const newAnswers = { ...answers, [questions[currentQuestion].id]: selectedAnswer };
    setAnswers(newAnswers);
    setSelectedAnswer('');

    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResults(true);
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setSelectedAnswer(answers[questions[currentQuestion - 1].id] || '');
    }
  };

  const handleRestart = () => {
    setCurrentQuestion(0);
    setAnswers({});
    setShowResults(false);
    setSelectedAnswer('');
  };

  const getResultProfile = () => {
    const answerValues = Object.values(answers);
    
    const privacyFocused = answerValues.filter(a => 
      a.includes('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞') || 
      a.includes('—Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ') ||
      a.includes('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å')
    ).length;

    const freedomFocused = answerValues.filter(a =>
      a.includes('—Å–≤–æ–±–æ–¥–∞ —Å–ª–æ–≤–∞') ||
      a.includes('–ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞') ||
      a.includes('–≥–æ–≤–æ—Ä–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ')
    ).length;

    if (privacyFocused >= 3) {
      return {
        title: 'üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏',
        description: '–î–ª—è –≤–∞—Å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ. –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å.',
        recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: P2P —Å–µ—Ç–∏, end-to-end —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.'
      };
    }

    if (freedomFocused >= 3) {
      return {
        title: 'üóΩ –ë–æ—Ä–µ—Ü –∑–∞ –°–≤–æ–±–æ–¥—É',
        description: '–°–≤–æ–±–æ–¥–∞ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∞—Å - –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å. –í—ã –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ä–∞–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞—Ç—å—Å—è.',
        recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π, blockchain-based —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏.'
      };
    }

    return {
      title: '‚öñÔ∏è –°—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –ë–∞–ª–∞–Ω—Å–∞',
      description: '–í—ã –∏—â–µ—Ç–µ –∑–æ–ª–æ—Ç—É—é —Å–µ—Ä–µ–¥–∏–Ω—É –º–µ–∂–¥—É —Å–≤–æ–±–æ–¥–æ–π, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ —É–¥–æ–±—Å—Ç–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.',
      recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: –§–µ–¥–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–∏ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º, open-source –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.'
    };
  };

  if (showResults) {
    const profile = getResultProfile();

    return (
      <div className="min-h-screen cyber-grid flex items-center justify-center p-4">
        <div className="w-full max-w-3xl animate-fade-in">
          <Card className="bg-card/90 backdrop-blur-xl border-primary/30 neon-glow">
            <CardContent className="p-8 md:p-12">
              <div className="text-center space-y-6">
                <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-primary/20 neon-glow mb-4">
                  <Icon name="ShieldCheck" size={40} className="text-primary" />
                </div>

                <h1 className="text-4xl md:text-5xl font-bold text-primary neon-text">
                  {profile.title}
                </h1>

                <p className="text-xl text-foreground/80">
                  {profile.description}
                </p>

                <div className="bg-primary/10 border border-primary/30 rounded-lg p-6 mt-8">
                  <h3 className="text-lg font-semibold text-primary mb-2 flex items-center gap-2">
                    <Icon name="Lightbulb" size={20} />
                    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                  </h3>
                  <p className="text-foreground/70">
                    {profile.recommendation}
                  </p>
                </div>

                <div className="space-y-4 mt-8">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
                    –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã
                  </h3>
                  {questions.map((q) => (
                    <div key={q.id} className="text-left bg-muted/20 rounded-lg p-4 border border-primary/10">
                      <p className="text-sm font-medium text-foreground/60 mb-2">
                        {q.text}
                      </p>
                      <p className="text-foreground font-medium flex items-start gap-2">
                        <Icon name="ArrowRight" size={16} className="text-primary mt-1 flex-shrink-0" />
                        {answers[q.id]}
                      </p>
                    </div>
                  ))}
                </div>

                <Button 
                  onClick={handleRestart}
                  size="lg"
                  className="mt-8 bg-primary hover:bg-primary/90 text-primary-foreground neon-glow"
                >
                  <Icon name="RotateCcw" size={20} className="mr-2" />
                  –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen cyber-grid flex items-center justify-center p-4">
      <div className="w-full max-w-2xl">
        <div className="text-center mb-8 animate-fade-in">
          <h1 className="text-5xl md:text-6xl font-bold text-primary neon-text mb-4">
            –°–≤–æ–±–æ–¥–Ω–∞—è –°–µ—Ç—å
          </h1>
          <p className="text-xl text-foreground/70">
            –û–ø—Ä–æ—Å –æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã
          </p>
        </div>

        <div className="mb-6 animate-slide-in">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-foreground/60">
              –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
            </span>
            <span className="text-sm font-medium text-primary">
              {Math.round(progress)}%
            </span>
          </div>
          <Progress value={progress} className="h-2 animate-glow-pulse" />
        </div>

        <Card className="bg-card/90 backdrop-blur-xl border-primary/30 neon-glow animate-fade-in">
          <CardContent className="p-8">
            <h2 className="text-2xl md:text-3xl font-bold text-foreground mb-8">
              {questions[currentQuestion].text}
            </h2>

            <RadioGroup value={selectedAnswer} onValueChange={setSelectedAnswer} className="space-y-4">
              {questions[currentQuestion].options.map((option, index) => (
                <div
                  key={index}
                  className={`flex items-center space-x-3 p-4 rounded-lg border-2 transition-all cursor-pointer hover:border-primary/50 hover:bg-primary/5 ${
                    selectedAnswer === option
                      ? 'border-primary bg-primary/10 neon-glow'
                      : 'border-border'
                  }`}
                  onClick={() => setSelectedAnswer(option)}
                >
                  <RadioGroupItem value={option} id={`option-${index}`} />
                  <Label
                    htmlFor={`option-${index}`}
                    className="flex-1 cursor-pointer text-base"
                  >
                    {option}
                  </Label>
                </div>
              ))}
            </RadioGroup>

            <div className="flex gap-4 mt-8">
              {currentQuestion > 0 && (
                <Button
                  onClick={handlePrevious}
                  variant="outline"
                  size="lg"
                  className="flex-1 border-primary/30 hover:bg-primary/10"
                >
                  <Icon name="ChevronLeft" size={20} className="mr-2" />
                  –ù–∞–∑–∞–¥
                </Button>
              )}
              <Button
                onClick={handleNext}
                size="lg"
                className={`flex-1 bg-primary hover:bg-primary/90 text-primary-foreground neon-glow ${
                  currentQuestion === 0 ? 'w-full' : ''
                }`}
              >
                {currentQuestion === questions.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–î–∞–ª–µ–µ'}
                <Icon name="ChevronRight" size={20} className="ml-2" />
              </Button>
            </div>
          </CardContent>
        </Card>

        <div className="mt-6 text-center">
          <p className="text-sm text-muted-foreground flex items-center justify-center gap-2">
            <Icon name="Lock" size={16} />
            –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∞–Ω–æ–Ω–∏–º–Ω—ã –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
          </p>
        </div>
      </div>
    </div>
  );
}
